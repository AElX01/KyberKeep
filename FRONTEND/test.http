@baseUrl = http://localhost:3000

# ⚠️ CONFIGURA MANUALMENTE ⬇️
# Después de login, copia tu accessToken y refreshToken aquí:
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODEyNjk3YTEzYzFjMjc2MzdmODhjYTQiLCJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZW1haWwiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInJvbGVzIjpbInVzZXIiXSwianRpIjoiMjkzZWI1NmMtNzk1My00MjZiLWEyODAtNzQxYzYxNTE1NWUwIiwidmF1bHRfdmVyc2lvbiI6IjEuMC4wIiwiaWF0IjoxNzQ2MDM3MTE0LCJleHAiOjE3NDYwMzgwMTR9.NnHVCQQuATLymjJFtHaAUh970uziOqGyXYuDoctcSgQ
@refreshToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODEyNjk3YTEzYzFjMjc2MzdmODhjYTQiLCJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZW1haWwiOiJ0ZXN0dXNlckBleGFtcGxlLmNvbSIsInJvbGVzIjpbInVzZXIiXSwianRpIjoiMjkzZWI1NmMtNzk1My00MjZiLWEyODAtNzQxYzYxNTE1NWUwIiwidmF1bHRfdmVyc2lvbiI6IjEuMC4wIiwiaWF0IjoxNzQ2MDM3MTE0LCJleHAiOjE3NDY2NDE5MTR9.Plrcs_aN0pYs5Kk2yVsV_Z_pXZzA4eilAjDaumUU4yk

### -------------------- AUTENTICACIÓN --------------------

### Register new user [register]
POST {{baseUrl}}/api/users/register
Content-Type: application/json

{
  "username": "testuser",
  "email": "testuser@example.com",
  "hashed_master_password": "dummyhashedpw",
  "salt": "somesalt",
  "public_key": "base64PublicKey",
  "encrypted_private_key": "base64EncryptedPrivateKey",
  "encrypted_vault_key": "base64EncryptedVaultKey",
  "encrypted_vault": "base64EncryptedVault"
}

# Expected: 200 OK → { accessToken: string, refreshToken: string }

### Login [login]
POST {{baseUrl}}/api/users/login
Content-Type: application/json

{
  "username": "testuser",
  "hashed_master_password": "dummyhashedpw"
}

# Ejecuta y copia los valores a @accessToken y @refreshToken arriba
# Expected: 200 OK → { accessToken: string, refreshToken: string }

### Refresh token [refresh]
POST {{baseUrl}}/api/users/token
Content-Type: application/json

{
  "token": "{{refreshToken}}"
}

# Expected: 200 OK → { accessToken: string }
# Ejecuta y actualiza @accessToken si deseas probar con nuevo token

### Logout [logout]
POST {{baseUrl}}/api/users/logout
Content-Type: application/json

{
  "token": "{{refreshToken}}"
}

# Expected: 200 OK → { message: "Sesión cerrada" }

### -------------------- CRUD DE USUARIOS --------------------

### Get current user [GET /api/users/me]
GET {{baseUrl}}/api/users/me
x-auth: {{accessToken}}

# Expected: 200 OK → Perfil del usuario (sin hashed_master_password)

### Update current user [PATCH /api/users/me]
PATCH {{baseUrl}}/api/users/me
x-auth: {{accessToken}}
Content-Type: application/json

{
  "username": "updatedUser",
  "email": "updated@example.com"
}

# Expected: 200 OK → { message: "Usuario actualizado", user: {...} }

### Delete current user [DELETE /api/users/me]
DELETE {{baseUrl}}/api/users/me
x-auth: {{accessToken}}

# Expected: 200 OK → { message: "Cuenta eliminada exitosamente" }

### -------------------- CRUD DE VAULTS --------------------

### Create vault [POST /api/vaults]
POST {{baseUrl}}/api/vaults
x-auth: {{accessToken}}
Content-Type: application/json

{
  "encrypted_vault": "initialEncryptedVaultBase64"
}

### Create vault [POST /api/vaults]
POST {{baseUrl}}/api/vaults
x-auth: {{accessToken}}
Content-Type: application/json

{
  "encrypted_vault": "secondEncryptedVaultBase64"
}

# Expected: 201 Created → { message: "Vault creado" }

### Get vault [GET /api/vaults]
GET {{baseUrl}}/api/vaults
x-auth: {{accessToken}}

# Expected: 200 OK → { encrypted_vault: string }

### Update vault [PATCH /api/vaults]
PATCH {{baseUrl}}/api/vaults
x-auth: {{accessToken}}
Content-Type: application/json

{
  "encrypted_vault": "updatedEncryptedVaultBase64"
}

# Expected: 200 OK → { message: "Vault actualizado", vault: {...} }

### Delete vault [DELETE /api/vaults]
DELETE {{baseUrl}}/api/vaults
x-auth: {{accessToken}}

{
  "encrypted_vault": "updatedEncryptedVaultBase64"
}

# Expected: 200 OK → { message: "Vault eliminado" }
